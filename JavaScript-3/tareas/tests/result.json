{"numFailedTestSuites":1,"numFailedTests":4,"numPassedTestSuites":0,"numPassedTests":13,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":1,"numTotalTests":17,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1657150605035,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["devolverPrimerElemento(arr)"],"failureMessages":[],"fullName":"devolverPrimerElemento(arr) Debería retornar el primer elemento en el array","location":null,"status":"passed","title":"Debería retornar el primer elemento en el array"},{"ancestorTitles":["devolverUltimoElemento(arr)"],"failureMessages":[],"fullName":"devolverUltimoElemento(arr) Debería retornar el último elemento en el array","location":null,"status":"passed","title":"Debería retornar el último elemento en el array"},{"ancestorTitles":["obtenerLargoDelArray(arr)"],"failureMessages":[],"fullName":"obtenerLargoDelArray(arr) Debería retornar la longitud del array","location":null,"status":"passed","title":"Debería retornar la longitud del array"},{"ancestorTitles":["incrementarPorUno(arr)"],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\nExpected: [11, 11, 17, 13]\nReceived: undefined\n    at Object.<anonymous> (C:\\Users\\sabri\\Desktop\\Test-JS-I-1\\JavaScript-3\\tareas\\tests\\JavaScript-3.test.js:47:49)\n    at Object.asyncJestTest (C:\\Users\\sabri\\Desktop\\Test-JS-I-1\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at C:\\Users\\sabri\\Desktop\\Test-JS-I-1\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (C:\\Users\\sabri\\Desktop\\Test-JS-I-1\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at C:\\Users\\sabri\\Desktop\\Test-JS-I-1\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"incrementarPorUno(arr) Debería retornar todos los valores del arreglo pero incrementados en uno","location":null,"status":"failed","title":"Debería retornar todos los valores del arreglo pero incrementados en uno"},{"ancestorTitles":["agregarItemAlFinalDelArray(arr, item)"],"failureMessages":[],"fullName":"agregarItemAlFinalDelArray(arr, item) Debería retornar el arreglo entero pero con el item agregado en la última posición","location":null,"status":"passed","title":"Debería retornar el arreglo entero pero con el item agregado en la última posición"},{"ancestorTitles":["agregarItemAlComienzoDelArray(arr, item)"],"failureMessages":[],"fullName":"agregarItemAlComienzoDelArray(arr, item) Debería retornar el arreglo entero pero con el item agregado en la primera posición","location":null,"status":"passed","title":"Debería retornar el arreglo entero pero con el item agregado en la primera posición"},{"ancestorTitles":["dePalabrasAFrase(words)"],"failureMessages":[],"fullName":"dePalabrasAFrase(words) Debería retornar una sola string con los valores del arreglo separados por espacios","location":null,"status":"passed","title":"Debería retornar una sola string con los valores del arreglo separados por espacios"},{"ancestorTitles":["arrayContiene(arr, item)"],"failureMessages":[],"fullName":"arrayContiene(arr, item) Debería retornar true si el arreglo contiene el item","location":null,"status":"passed","title":"Debería retornar true si el arreglo contiene el item"},{"ancestorTitles":["agregarNumeros(numbers)"],"failureMessages":[],"fullName":"agregarNumeros(numbers) Debería agregar todos los números en un arreglo y retornar el resultado total","location":null,"status":"passed","title":"Debería agregar todos los números en un arreglo y retornar el resultado total"},{"ancestorTitles":["promedioResultadosTest(testScores)"],"failureMessages":[],"fullName":"promedioResultadosTest(testScores) Debería retornar el promedio de todos los valores","location":null,"status":"passed","title":"Debería retornar el promedio de todos los valores"},{"ancestorTitles":["numeroMasGrande(numbers)"],"failureMessages":[],"fullName":"numeroMasGrande(numbers) Debería retornar el número más grande","location":null,"status":"passed","title":"Debería retornar el número más grande"},{"ancestorTitles":["cuentoElementos(arreglo)"],"failureMessages":["ReferenceError: array is not defined\n    at cuentoElementos (C:\\Users\\sabri\\Desktop\\Test-JS-I-1\\JavaScript-3\\tareas\\tareas.js:113:23)\n    at Object.<anonymous> (C:\\Users\\sabri\\Desktop\\Test-JS-I-1\\JavaScript-3\\tareas\\tests\\JavaScript-3.test.js:109:12)\n    at Object.asyncJestTest (C:\\Users\\sabri\\Desktop\\Test-JS-I-1\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at C:\\Users\\sabri\\Desktop\\Test-JS-I-1\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (C:\\Users\\sabri\\Desktop\\Test-JS-I-1\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at C:\\Users\\sabri\\Desktop\\Test-JS-I-1\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"cuentoElementos(arreglo) Debería retornar el numero de veces que encuentre números mayores a 18","location":null,"status":"failed","title":"Debería retornar el numero de veces que encuentre números mayores a 18"},{"ancestorTitles":["diaDeLaSemana(numeroDeDia)"],"failureMessages":[],"fullName":"diaDeLaSemana(numeroDeDia) Debería retornar \"Es dia laboral\" o \"Es fin de semana\" según el número asociado","location":null,"status":"passed","title":"Debería retornar \"Es dia laboral\" o \"Es fin de semana\" según el número asociado"},{"ancestorTitles":["empiezaConNueve(n))"],"failureMessages":[],"fullName":"empiezaConNueve(n)) Debería retornar true o false dependiendo si n empieza con 9","location":null,"status":"passed","title":"Debería retornar true o false dependiendo si n empieza con 9"},{"ancestorTitles":["todosIguales(arreglo)"],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: undefined\n    at Object.<anonymous> (C:\\Users\\sabri\\Desktop\\Test-JS-I-1\\JavaScript-3\\tareas\\tests\\JavaScript-3.test.js:136:45)\n    at Object.asyncJestTest (C:\\Users\\sabri\\Desktop\\Test-JS-I-1\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at C:\\Users\\sabri\\Desktop\\Test-JS-I-1\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (C:\\Users\\sabri\\Desktop\\Test-JS-I-1\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at C:\\Users\\sabri\\Desktop\\Test-JS-I-1\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"todosIguales(arreglo) Debería retornar true si todos los elementos del arreglo son iguales, caso contrario debería retornar false","location":null,"status":"failed","title":"Debería retornar true si todos los elementos del arreglo son iguales, caso contrario debería retornar false"},{"ancestorTitles":["mesesDelAño(array)"],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\nExpected: [\"Marzo\", \"Noviembre\", \"Enero\"]\nReceived: undefined\n    at Object.<anonymous> (C:\\Users\\sabri\\Desktop\\Test-JS-I-1\\JavaScript-3\\tareas\\tests\\JavaScript-3.test.js:147:29)\n    at Object.asyncJestTest (C:\\Users\\sabri\\Desktop\\Test-JS-I-1\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at C:\\Users\\sabri\\Desktop\\Test-JS-I-1\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (C:\\Users\\sabri\\Desktop\\Test-JS-I-1\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at C:\\Users\\sabri\\Desktop\\Test-JS-I-1\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"],"fullName":"mesesDelAño(array) Debería retornar un nuevo arreglo con los meses solicitados, caso contrario retorna \"No se encontraron los meses pedidos\"","location":null,"status":"failed","title":"Debería retornar un nuevo arreglo con los meses solicitados, caso contrario retorna \"No se encontraron los meses pedidos\""},{"ancestorTitles":["mayorACien(array)"],"failureMessages":[],"fullName":"mayorACien(array) Debería retornar un arreglo solo con los valores mayores a 100","location":null,"status":"passed","title":"Debería retornar un arreglo solo con los valores mayores a 100"}],"endTime":1657150607331,"message":"  ● incrementarPorUno(arr) › Debería retornar todos los valores del arreglo pero incrementados en uno\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: [11, 11, 17, 13]\n    Received: undefined\n\n      45 | describe('incrementarPorUno(arr)', function() {\n      46 |   it('Debería retornar todos los valores del arreglo pero incrementados en uno', function() {\n    > 47 |     expect(incrementarPorUno([10, 10, 16, 12])).toEqual([11, 11, 17, 13]);\n         |                                                 ^\n      48 |     expect(incrementarPorUno([97, 100, 80, 55, 72, 94])).toEqual([98, 101, 81, 56, 73, 95]);\n      49 |     expect(incrementarPorUno([])).toEqual([]);\n      50 |   });\n\n      at Object.<anonymous> (JavaScript-3/tareas/tests/JavaScript-3.test.js:47:49)\n\n  ● cuentoElementos(arreglo) › Debería retornar el numero de veces que encuentre números mayores a 18\n\n    ReferenceError: array is not defined\n\n      111 |   //Escribe tu código aquí\n      112 |   let cont = [];\n    > 113 |   for (let i = 0; i < array.length; i++) {\n          |                       ^\n      114 |     if (array[i] > 10) { // Aquí es mayor a 10, no mayor o igual\n      115 |       cont.push(array[i]);\n      116 |     }\n\n      at cuentoElementos (JavaScript-3/tareas/tareas.js:113:23)\n      at Object.<anonymous> (JavaScript-3/tareas/tests/JavaScript-3.test.js:109:12)\n\n  ● todosIguales(arreglo) › Debería retornar true si todos los elementos del arreglo son iguales, caso contrario debería retornar false\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: undefined\n\n      134 | describe('todosIguales(arreglo)', function() {\n      135 |   it('Debería retornar true si todos los elementos del arreglo son iguales, caso contrario debería retornar false', function() {\n    > 136 |     expect(todosIguales([20, 20, 20, 20 ])).toBe(true);\n          |                                             ^\n      137 |     expect(todosIguales([97, 100, 190, 9])).toBe(false);\n      138 |    \n      139 |     expect(todosIguales([230, 230, 230, 230 ])).toBe(true);\n\n      at Object.<anonymous> (JavaScript-3/tareas/tests/JavaScript-3.test.js:136:45)\n\n  ● mesesDelAño(array) › Debería retornar un nuevo arreglo con los meses solicitados, caso contrario retorna \"No se encontraron los meses pedidos\"\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: [\"Marzo\", \"Noviembre\", \"Enero\"]\n    Received: undefined\n\n      145 |     var ok = [\"Marzo\", \"Diciembre\", \"Abril\", \"Junio\", \"Julio\", \"Noviembre\", \"Enero\", \"Mayo\", \"Febrero\"];\n      146 |     var wrong = [\"Marzo\", \"Diciembre\", \"Julio\", \"Noviembre\"];\n    > 147 |     expect(mesesDelAño(ok)).toEqual([\"Marzo\", \"Noviembre\", \"Enero\"]);\n          |                             ^\n      148 |     expect(mesesDelAño(wrong)).toEqual(\"No se encontraron los meses pedidos\");\n      149 |   });\n      150 | });\n\n      at Object.<anonymous> (JavaScript-3/tareas/tests/JavaScript-3.test.js:147:29)\n","name":"C:\\Users\\sabri\\Desktop\\Test-JS-I-1\\JavaScript-3\\tareas\\tests\\JavaScript-3.test.js","startTime":1657150606120,"status":"failed","summary":""}],"wasInterrupted":false}